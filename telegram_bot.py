# # from telegram import Update
# # from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
# # import random
# # import datetime

# # TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"

# # # # ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’∞’•’¨’∏÷Ç dictionary
# # # users_data = {}
# # # # ’ï÷Ä’æ’° ’∞’°’≤’©’∏’≤’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø
# # # winners_today = []

# # # async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
# # #     user_id = update.message.from_user.id
# # #     users_data[user_id] = {
# # #         "target": random.randint(1, 100),
# # #         "attempts_left": 5,
# # #         "paid": False,
# # #         "username": update.message.from_user.username or str(user_id)
# # #     }
# # #     await update.message.reply_text(
# # #         "‘≤’°÷Ä÷á üëã\n"
# # #         "‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥!\n"
# # #         "‘µ’Ω ’¥’ø’°’Æ’•’¨ ’•’¥ 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ÷â ‘≥’∏÷Ç’∑’°’Ø’´÷Ä ’°’µ’∂÷â\n"
# # #         "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n"
# # #         "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n"
# # #         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM` 077779321 üì≤\n"
# # #         "’é’≥’°÷Ä’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù @aleqsmirakyan"
# # #     )

# # # async def guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
# # #     user_id = update.message.from_user.id
# # #     if user_id not in users_data:
# # #         await update.message.reply_text("’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /start")
# # #         return

# # #     try:
# # #         guess = int(update.message.text)
# # #     except ValueError:
# # #         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
# # #         return

# # #     data = users_data[user_id]
# # #     if data["attempts_left"] <= 0:
# # #         await update.message.reply_text(
# # #             "’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n"
# # #             "’é’≥’°÷Ä’´÷Ä 1000÷è’ù 077779321-’´’∂’ù 20 ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
# # #         )
# # #         return

# # #     data["attempts_left"] -= 1
# # #     target = data["target"]

# # #     if guess == target:
# # #         winners_today.append(data["username"])
# # #         await update.message.reply_text("üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’¥! ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!")
# # #         data["target"] = random.randint(1, 100)
# # #         data["attempts_left"] = 5 if not data["paid"] else 20
# # #     elif guess < target:
# # #         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
# # #     else:
# # #         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# # # async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
# # #     await update.message.reply_text("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä.’ù 45) ’Ø’°’¥ ’£÷Ä’´÷Ä /start ’∂’∏÷Ä ’≠’°’≤ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# # # async def winners(update: Update, context: ContextTypes.DEFAULT_TYPE):
# # #     today = datetime.datetime.now().strftime("%Y-%m-%d")
# # #     if winners_today:
# # #         text = f"üèÜ {today} ÷Ö÷Ä’æ’° ’∞’°’≤’©’∏’≤(’∂’•÷Ä)’∂ ’•’∂’ù\n" + "\n".join(winners_today)
# # #     else:
# # #         text = "‘±’µ’Ω÷Ö÷Ä ’§’•’º ’∞’°’≤’©’∏’≤ ’π’Ø’°÷â"
# # #     await update.message.reply_text(text)

# # # app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
# # # app.add_handler(CommandHandler("start", start))
# # # app.add_handler(CommandHandler("help", help_command))
# # # app.add_handler(CommandHandler("winners", winners))
# # # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, guess))

# # # print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# # # app.run_polling()

# # ADMIN_ID = 7967129348
# # # ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’∞’•’¨’∏÷Ç dictionary
# # users_data = {}
# # pending_verifications = {}  # ’Ü÷Ä’°’∂÷Ñ, ’∏’æ÷Ñ’•÷Ä ’£÷Ä’•’¨ ’•’∂ "’æ’≥’°÷Ä’•’¨ ’•’¥"

# # async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     user_id = update.message.from_user.id

# #     users_data[user_id] = {
# #         "target": random.randint(1, 100),
# #         "attempts_left": 5,
# #         "paid": False
# #     }

# #     await update.message.reply_text(
# #         "‘≤’°÷Ä÷á üëã\n"
# #         "‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥!\n"
# #         "‘µ’Ω ’¥’ø’°’Æ’•’¨ ’•’¥ 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ÷â ‘≥’∏÷Ç’∑’°’Ø’´÷Ä ’°’µ’∂÷â\n"
# #         "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n"
# #         "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n"
# #         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM’ù 077779321 üì≤\n"
# #         "’é’≥’°÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù ¬´’æ’≥’°÷Ä’•’¨ ’•’¥¬ª÷â"
# #     )

# # async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     await update.message.reply_text("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä.’ù 45) ’Ø’°’¥ ’£÷Ä’´÷Ä /start ’∂’∏÷Ä ’≠’°’≤ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# # async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     user_id = update.message.from_user.id
# #     text = update.message.text.lower()

# #     # ‘µ’©’• ’°’§’¥’´’∂’∂ ’ß ÷á ’∏÷Ç’¶’∏÷Ç’¥ ’ß ’∞’°’Ω’ø’°’ø’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥’®
# #     if text.startswith("/approve_"):
# #         if user_id != ADMIN_ID:
# #             await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
# #             return
# #         try:
# #             approved_id = int(text.split("_")[1])
# #             if approved_id in users_data:
# #                 users_data[approved_id]["paid"] = True
# #                 users_data[approved_id]["attempts_left"] += 20

# #                 await context.bot.send_message(chat_id=approved_id,
# #                     text="‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â ‘Ω’°’≤’® ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•÷Ñ÷â")

# #                 await update.message.reply_text(f"‚úÖ {pending_verifications.get(approved_id, '')}-’´ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â")
# #                 pending_verifications.pop(approved_id, None)
# #             else:
# #                 await update.message.reply_text("‚ùå ‘±’µ’§ ÷Ö’£’ø’°’ø’•÷Ä’® ’Ω’Ø’Ω’°’Æ ’≠’°’≤ ’π’∏÷Ç’∂’´÷â")
# #         except Exception:
# #             await update.message.reply_text("‚ö†Ô∏è ’ç’≠’°’¨ ID ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂÷â")
# #         return

# #     # ‘µ’©’• ÷Ö’£’ø’°’ø’•÷Ä’® ’£÷Ä’•’¨ ’ß "’æ’≥’°÷Ä’•’¨ ’•’¥"
# #     if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text:
# #         pending_verifications[user_id] = update.message.from_user.full_name
# #         await update.message.reply_text("‚úÖ ’Å’•÷Ä ’∞’°÷Ä÷Å’∏÷Ç’¥’® ÷É’∏’≠’°’∂÷Å’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

# #         await context.bot.send_message(
# #             chat_id=ADMIN_ID,
# #             text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß '’æ’≥’°÷Ä’•’¨ ’•’¥':\n’Ä’°’Ω’ø’°’ø’•’û’¨’ù /approve_{user_id}"
# #         )
# #         return

# #     # ‘µ’©’• ÷Ö’£’ø’°’ø’•÷Ä’® ’≠’°’≤’∏÷Ç’¥ ’ß’ù ÷É’∏÷Ä’±’•’¨’∏’æ ’£’∏÷Ç’∑’°’Ø’•’¨ ’©’´’æ
# #     if user_id not in users_data:
# #         await update.message.reply_text("’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /start")
# #         return

# #     try:
# #         guess = int(update.message.text)
# #     except ValueError:
# #         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
# #         return

# #     data = users_data[user_id]
# #     if data["attempts_left"] <= 0:
# #         await update.message.reply_text(
# #             "’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n"
# #             "’é’≥’°÷Ä’´÷Ä 1000÷è’ù 077779321-’´’∂’ù 20 ’∂’∏÷Ä ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
# #         )
# #         return

# #     data["attempts_left"] -= 1
# #     target = data["target"]

# #     if guess == target:
# #         await update.message.reply_text("üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’¥! ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!")
# #         data["target"] = random.randint(1, 100)
# #         data["attempts_left"] = 5 if not data["paid"] else 20
# #     elif guess < target:
# #         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
# #     else:
# #         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# # app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# # app.add_handler(CommandHandler("start", start))
# # app.add_handler(CommandHandler("help", help_command))
# # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# # print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# # app.run_polling()



# from telegram import Update
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
# import random

# TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"

# ADMIN_ID = 7967129348  # ’ì’∏’≠’´÷Ä ÷Ñ’∏ Telegram ID-’∏’æ

# # ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’∞’•’¨’∏÷Ç dictionary
# users_data = {}
# pending_verifications = {}  # ’Ü÷Ä’°’∂÷Ñ, ’∏’æ÷Ñ’•÷Ä ’£÷Ä’•’¨ ’•’∂ "’æ’≥’°÷Ä’•’¨ ’•’¥"

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id

#     users_data[user_id] = {
#         "target": random.randint(1, 100),
#         "attempts_left": 5,
#         "paid": False
#     }

#     await update.message.reply_text(
#         "‘≤’°÷Ä÷á üëã\n"
#         "‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥!\n"
#         "‘µ’Ω ’¥’ø’°’Æ’•’¨ ’•’¥ 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ÷â ‘≥’∏÷Ç’∑’°’Ø’´÷Ä ’°’µ’∂÷â\n"
#         "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM’ù 077779321 üì≤\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù ¬´’æ’≥’°÷Ä’•’¨ ’•’¥¬ª÷â"
#     )

# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä.’ù 45) ’Ø’°’¥ ’£÷Ä’´÷Ä /start ’∂’∏÷Ä ’≠’°’≤ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     text = update.message.text.lower()

#     # 1. ‘±’§’¥’´’∂’´ ’æ’≥’°÷Ä’¥’°’∂ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥
#     if text.startswith("/approve_"):
#         if user_id != ADMIN_ID:
#             await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
#             return
#         try:
#             approved_id = int(text.split("_")[1])
#         except:
#             await update.message.reply_text("‚ö†Ô∏è ’ç’≠’°’¨ ID ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂÷â")
#             return

#         if approved_id in users_data:
#             users_data[approved_id]["paid"] = True
#             users_data[approved_id]["attempts_left"] += 20

#             await context.bot.send_message(chat_id=approved_id,
#                 text="‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â ‘Ω’°’≤’® ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•÷Ñ÷â")

#             await update.message.reply_text(f"‚úÖ {pending_verifications.get(approved_id, '’ï’£’ø’°’ø’•÷Ä')}-’´ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â")
#             pending_verifications.pop(approved_id, None)
#         else:
#             await update.message.reply_text("‚ùå ‘±’µ’§ ÷Ö’£’ø’°’ø’•÷Ä’® ’Ω’Ø’Ω’°’Æ ’≠’°’≤ ’π’∏÷Ç’∂’´÷â")
#         return

#     # 2. ’ï’£’ø’°’ø’´÷Ä’∏’ª "’æ’≥’°÷Ä’•’¨ ’•’¥" ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®
#     if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text:
#         pending_verifications[user_id] = update.message.from_user.full_name
#         await update.message.reply_text("‚úÖ ’Å’•÷Ä ’∞’°÷Ä÷Å’∏÷Ç’¥’® ÷É’∏’≠’°’∂÷Å’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

#         await context.bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß '’æ’≥’°÷Ä’•’¨ ’•’¥':\n’Ä’°’Ω’ø’°’ø’•’û’¨’ù /approve_{user_id}"
#         )
#         return

#     # 3. ‘µ’©’• ÷Ö’£’ø’°’ø’•÷Ä’® ’≠’°’≤’´ ’¥’•’ª ’π’ß, ’∞’∏÷Ç’∑’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’Ø’Ω’•’¨ /start-’∏’æ
#     if user_id not in users_data:
#         await update.message.reply_text("’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /start")
#         return

#     # 4. ‘≥’∏÷Ç’∑’°’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’©’´’æ
#     try:
#         guess = int(text)
#     except ValueError:
#         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
#         return

#     data = users_data[user_id]
#     if data["attempts_left"] <= 0:
#         await update.message.reply_text(
#             "’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n"
#             "’é’≥’°÷Ä’´÷Ä 1000÷è’ù 077779321-’´’∂’ù 20 ’∂’∏÷Ä ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
#         )
#         return

#     data["attempts_left"] -= 1
#     target = data["target"]

#     if guess == target:
#         await update.message.reply_text("üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’¥! ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!")
#         data["target"] = random.randint(1, 100)
#         data["attempts_left"] = 5 if not data["paid"] else 20
#     elif guess < target:
#         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
#     else:
#         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# app.add_handler(CommandHandler("start", start))
# app.add_handler(CommandHandler("help", help_command))
# app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# app.run_polling()


# from telegram import Update
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
# import random

# # ü§ñ ’î’∏ ’¢’∏’ø’´ token-’®
# TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"

# # üëë ‘±’§’¥’´’∂’´ Telegram ID-’∂ (’±’•÷Ä’®)
# ADMIN_ID = 7967129348

# # üìä ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∏÷Å
# users_data = {}
# pending_verifications = {}  # ’Ü÷Ä’°’∂÷Ñ, ’∏’æ÷Ñ’•÷Ä ’£÷Ä’•’¨ ’•’∂ "’æ’≥’°÷Ä’•’¨ ’•’¥" ’Ø’°’¥ "’æ’≥’°÷Ä’æ’°’Æ ’ß"

# # üöÄ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id

#     users_data[user_id] = {
#         "target": random.randint(1, 100),
#         "attempts_left": 5,
#         "paid": False
#     }

#     await update.message.reply_text(
#         "‘≤’°÷Ä÷á üëã\n"
#         "‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥!\n"
#         "‘µ’Ω ’¥’ø’°’Æ’•’¨ ’•’¥ 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ÷â ‘≥’∏÷Ç’∑’°’Ø’´÷Ä ’°’µ’∂÷â\n"
#         "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM’ù 077779321 üì≤\n"
#         "’é’≥’°÷Ä’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù ¬´’æ’≥’°÷Ä’•’¨ ’•’¥¬ª ’Ø’°’¥ ¬´’æ’≥’°÷Ä’æ’°’Æ ’ß¬ª÷â"
#     )

# # ‚ÑπÔ∏è ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂
# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä.’ù 45) ’Ø’°’¥ ’£÷Ä’´÷Ä /start ’∂’∏÷Ä ’≠’°’≤ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# # üß† ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’£’¨’≠’°’æ’∏÷Ä ’¥’∑’°’Ø’´’π
# async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     text = update.message.text.lower().strip()

#     # ‚úÖ ’é’≥’°÷Ä’¥’°’∂ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥ ’°’§’¥’´’∂’´ ’Ø’∏’≤’¥’´÷Å
#     if text.startswith("/approve_"):
#         if user_id != ADMIN_ID:
#             await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
#             return
#         try:
#             approved_id = int(text.split("_")[1])
#         except:
#             await update.message.reply_text("‚ö†Ô∏è ’ç’≠’°’¨ ID ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂÷â")
#             return

#         if approved_id in users_data:
#             users_data[approved_id]["paid"] = True
#             users_data[approved_id]["attempts_left"] += 20

#             await context.bot.send_message(chat_id=approved_id,
#                 text="‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â ‘Ω’°’≤’® ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•÷Ñ÷â")

#             await update.message.reply_text(f"‚úÖ {pending_verifications.get(approved_id, '’ï’£’ø’°’ø’•÷Ä')}-’´ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â")
#             pending_verifications.pop(approved_id, None)
#         else:
#             await update.message.reply_text("‚ùå ‘±’µ’§ ÷Ö’£’ø’°’ø’•÷Ä’® ’Ω’Ø’Ω’°’Æ ’≠’°’≤ ’π’∏÷Ç’∂’´÷â")
#         return

#     # üí∏ ’ï’£’ø’°’ø’´÷Ä’∏’ª "’æ’≥’°÷Ä’•’¨ ’•’¥" ’Ø’°’¥ "’æ’≥’°÷Ä’æ’°’Æ ’ß" ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®
#     if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text or "’æ’≥’°÷Ä’æ’°’Æ ’ß" in text:
#         pending_verifications[user_id] = update.message.from_user.full_name
#         await update.message.reply_text(
#             "‚úÖ ’Å’•÷Ä ’∞’°÷Ä÷Å’∏÷Ç’¥’® ÷É’∏’≠’°’∂÷Å’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â\n"
#             "‘±’§’¥’´’∂’´’∂ ’∫’•’ø÷Ñ ’ß ’∏÷Ç’≤’°÷Ä’Ø’´ ’∞’•’ø÷á’µ’°’¨ ’∞÷Ä’°’¥’°’∂’®’ù \n"
#             f"/approve_{user_id} \n"
#             "‘±’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’∫’•’ø÷Ñ ’ß ’£÷Ä’´ Telegram-’∏÷Ç’¥ ’¢’∏’ø’´ ’∞’•’ø ’π’°’ø’∏÷Ç’¥÷â"
#         )

#         await context.bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß '{update.message.text}':\n’Ä’°’Ω’ø’°’ø’•’û’¨’ù /approve_{user_id}"
#         )
#         return

#     # üîÅ ‘µ’©’• ’≠’°’≤’® ’Ω’Ø’Ω’æ’°’Æ ’π’ß’ù ’∞’∏÷Ç’∑’∏÷Ç’¥ ’ø’°’¨
#     if user_id not in users_data:
#         await update.message.reply_text("’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /start")
#         return

#     # üî¢ ‘π’æ’´ ’£’∏÷Ç’∑’°’Ø’∏÷Ç’¥
#     try:
#         guess = int(text)
#     except ValueError:
#         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
#         return

#     data = users_data[user_id]
#     if data["attempts_left"] <= 0:
#         await update.message.reply_text(
#             "’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n"
#             "’é’≥’°÷Ä’´÷Ä 1000÷è’ù 077779321-’´’∂’ù 20 ’∂’∏÷Ä ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
#         )
#         return

#     data["attempts_left"] -= 1
#     target = data["target"]

#     if guess == target:
#         await update.message.reply_text("üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’¥! ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!")
#         data["target"] = random.randint(1, 100)
#         data["attempts_left"] = 5 if not data["paid"] else 20
#     elif guess < target:
#         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
#     else:
#         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# # ‚úÖ ‘≤’∏’ø’´ ’£’∏÷Ä’Æ’°÷Ä’Ø’∏÷Ç’¥
# app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
# app.add_handler(CommandHandler("start", start))
# app.add_handler(CommandHandler("help", help_command))
# app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# app.run_polling()


# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# import random

# # üîê Token & Admin
# TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"
# ADMIN_ID = 7967129348  # ÷É’∏’≠’´÷Ä ÷Ñ’∏ ID-’∏’æ

# # üìä ’è’æ’µ’°’¨’∂’•÷Ä
# users_data = {}
# pending_verifications = {}

# # üöÄ /start ’∞÷Ä’°’¥’°’∂
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id

#     users_data[user_id] = {
#         "target": random.randint(1, 100),
#         "attempts_left": 5,
#         "paid": False
#     }

#     await update.message.reply_text(
#         "‘≤’°÷Ä÷á üëã\n"
#         "‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥!\n"
#         "‘µ’Ω ’¥’ø’°’Æ’•’¨ ’•’¥ 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ÷â ‘≥’∏÷Ç’∑’°’Ø’´÷Ä ’°’µ’∂÷â\n"
#         "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM’ù 077779321 üì≤\n"
#         "’é’≥’°÷Ä’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù ¬´’æ’≥’°÷Ä’•’¨ ’•’¥¬ª÷â"
#     )

# # ‚ÑπÔ∏è /help ’∞÷Ä’°’¥’°’∂
# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä.’ù 45) ’Ø’°’¥ ’£÷Ä’´÷Ä /start ’∂’∏÷Ä ’≠’°’≤ ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# # üß† ‘≥’¨’≠’°’æ’∏÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’¥’∑’°’Ø’´’π
# async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     text = update.message.text.lower().strip()

#     # ‚úÖ ’é’≥’°÷Ä’•’¨ ’•’¥
#     if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text or "’æ’≥’°÷Ä’æ’°’Æ ’ß" in text:
#         pending_verifications[user_id] = update.message.from_user.full_name
#         await update.message.reply_text("‚úÖ ’Å’•÷Ä ’∞’°÷Ä÷Å’∏÷Ç’¥’® ÷É’∏’≠’°’∂÷Å’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

#         # ’Ä’°’Ω’ø’°’ø’¥’°’∂ ’Ø’∏’≥’°’Ø
#         keyboard = InlineKeyboardMarkup([
#             [InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥’®", callback_data=f"approve_{user_id}")]
#         ])

#         await context.bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß ¬´{update.message.text}¬ª÷â",
#             reply_markup=keyboard
#         )
#         return

#     # üë§ ’ç’Ø’Ω’°’Æ ’π’ß
#     if user_id not in users_data:
#         await update.message.reply_text("’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /start")
#         return

#     # üî¢ ‘π’æ’´ ’£’∏÷Ç’∑’°’Ø’∏÷Ç’¥
#     try:
#         guess = int(text)
#     except ValueError:
#         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
#         return

#     data = users_data[user_id]
#     if data["attempts_left"] <= 0:
#         await update.message.reply_text(
#             "’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n"
#             "’é’≥’°÷Ä’´÷Ä 1000÷è’ù 077779321-’´’∂’ù 20 ’∂’∏÷Ä ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
#         )
#         return

#     data["attempts_left"] -= 1
#     target = data["target"]

#     if guess == target:
#         await update.message.reply_text("üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’¥! ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!")
#         data["target"] = random.randint(1, 100)
#         data["attempts_left"] = 5 if not data["paid"] else 20
#     elif guess < target:
#         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
#     else:
#         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# # ‚úÖ ‘ø’∏’≥’°’Ø’∏’æ ’∞’°’Ω’ø’°’ø’¥’°’∂ callback
# async def approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()

#     if query.from_user.id != ADMIN_ID:
#         await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
#         return

#     data = query.data
#     if data.startswith("approve_"):
#         user_id = int(data.split("_")[1])
#         if user_id in users_data:
#             users_data[user_id]["paid"] = True
#             users_data[user_id]["attempts_left"] += 20

#             await context.bot.send_message(
#                 chat_id=user_id,
#                 text="‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â ‘Ω’°’≤’® ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•÷Ñ÷â"
#             )

#             await query.edit_message_text(f"‚úÖ {pending_verifications.get(user_id, '’ï’£’ø’°’ø’•÷Ä')}-’´ ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â")
#             pending_verifications.pop(user_id, None)
#         else:
#             await query.edit_message_text("‚ùå ‘±’µ’§ ÷Ö’£’ø’°’ø’•÷Ä’® ’§’•’º ’≠’°’≤ ’π’´ ’Ω’Ø’Ω’•’¨÷â")

# # ‚ñ∂Ô∏è ‘≥’∏÷Ä’Æ’°÷Ä’Ø’∏÷Ç’¥
# app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
# app.add_handler(CommandHandler("start", start))
# app.add_handler(CommandHandler("help", help_command))
# app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
# app.add_handler(CallbackQueryHandler(approve_callback))

# print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# app.run_polling()


# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# import random

# TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"
# ADMIN_ID = 7967129348

# users_data = {}
# pending_verifications = {}

# # ‚úÖ /start ’∞÷Ä’°’¥’°’∂
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     users_data[user_id] = {
#         "target": random.randint(1, 100),
#         "attempts_left": 5,
#         "paid": False
#     }

#     keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton("üéÆ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®"), KeyboardButton("‚ÑπÔ∏è ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂")]
#         ],
#         resize_keyboard=True
#     )

#     await update.message.reply_text(
#         "‘≤’°÷Ä÷á üëã\n‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥:\n‘≥’∏÷Ç’∑’°’Ø’´÷Ä 1-100 ’¥’´’ª’°’Ø’°’µ÷Ñ’∏÷Ç’¥ ’©’´’æ’®÷â\n"
#         "’à÷Ç’∂’•’Ω 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â ’é’≥’°÷Ä’•’¨’∏’æ’ù ’Ω’ø’°’∂’∏÷Ç’¥ ’•’Ω 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä IDRAM’ù 077779321 üì≤\n"
#         "’é’≥’°÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä ¬´’æ’≥’°÷Ä’•’¨ ’•’¥¬ª÷â",
#         reply_markup=keyboard
#     )

# # ‚úÖ /help ’∞÷Ä’°’¥’°’∂
# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("‚úèÔ∏è ’ä’°÷Ä’¶’°’∫’•’Ω ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’©’´’æ (÷Ö÷Ä’´’∂’°’Ø’ù 45) ’Ø’°’¥ ’Ω’•’≤’¥’´÷Ä üéÆ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®’ù ’∂’∏÷Ä’´÷Å ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")

# # ‚úÖ ‘≥’¨’≠’°’æ’∏÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’¥’∑’°’Ø’´’π
# async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.message.from_user.id
#     text = update.message.text.lower().strip()

#     # üÜò ‘≤’°’º’°’µ’´’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä
#     if text == "üéÆ ’Ω’Ø’Ω’•’¨ ’≠’°’≤’®":
#         await start(update, context)
#         return
#     elif text == "‚ÑπÔ∏è ÷Ö’£’∂’∏÷Ç’©’µ’∏÷Ç’∂":
#         await help_command(update, context)
#         return

#     # üí∏ ’é’≥’°÷Ä’•’¨ ’•’¥
#     if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text or "’æ’≥’°÷Ä’æ’°’Æ ’ß" in text:
#         pending_verifications[user_id] = update.message.from_user.full_name
#         await update.message.reply_text("‚úÖ ’Å’•÷Ä ’∞’°÷Ä÷Å’∏÷Ç’¥’® ÷É’∏’≠’°’∂÷Å’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

#         keyboard = InlineKeyboardMarkup([
#             [InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"approve_{user_id}"),
#              InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data=f"cancel_{user_id}")]
#         ])

#         await context.bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß ¬´{update.message.text}¬ª:",
#             reply_markup=keyboard
#         )
#         return

#     # ü§ñ ’ç’Ø’Ω’°’Æ ’π’ß
#     if user_id not in users_data:
#         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’£÷Ä’´÷Ä /start’ù ’≠’°’≤’® ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
#         return

#     # üî¢ ‘π’æ’´ ÷É’∏÷Ä’±
#     try:
#         guess = int(text)
#     except ValueError:
#         await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
#         return

#     data = users_data[user_id]
#     if data["attempts_left"] <= 0:
#         await update.message.reply_text("’ì’∏÷Ä’±’•÷Ä’§ ’°’æ’°÷Ä’ø’æ’•’¨ ’•’∂ ‚ùå\n’é’≥’°÷Ä’´÷Ä 1000÷è’ù 20 ’∂’∏÷Ä ÷É’∏÷Ä’± ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
#         return

#     data["attempts_left"] -= 1
#     if guess == data["target"]:
#         await update.message.reply_text("üéâ ‘¥’∏÷Ç ’≥’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä ’©’´’æ’®!\n’Ü’∏÷Ä ’©’´’æ ’•’¥ ’¥’ø’°’Æ’∏÷Ç’¥‚Ä§‚Ä§‚Ä§")
#         data["target"] = random.randint(1, 100)
#         data["attempts_left"] = 5 if not data["paid"] else 20
#     elif guess < data["target"]:
#         await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")
#     else:
#         await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ ÷É’∏÷Ä’±’´÷Ä÷â ’Ñ’∂’°÷Å’•’¨ ’ß {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# # ‚úÖ Callback - approve / cancel
# async def approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#     data = query.data

#     if query.from_user.id != ADMIN_ID:
#         await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
#         return

#     if data.startswith("approve_"):
#         user_id = int(data.split("_")[1])
#         if user_id in users_data:
#             users_data[user_id]["paid"] = True
#             users_data[user_id]["attempts_left"] += 20
#             await context.bot.send_message(chat_id=user_id,
#                 text="‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•’¨ ’ß÷â ’ç’ø’°÷Å’•’¨ ’•÷Ñ 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â")
#             await query.edit_message_text("üí∞ ’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â")
#             pending_verifications.pop(user_id, None)
#         else:
#             await query.edit_message_text("‚ùå ‘±’µ’§ ÷Ö’£’ø’°’ø’•÷Ä’® ’≠’°’≤’® ’π’´ ’Ω’Ø’Ω’•’¨÷â")

#     elif data.startswith("cancel_"):
#         user_id = int(data.split("_")[1])
#         await context.bot.send_message(chat_id=user_id,
#             text="‚ùå ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’¥’•÷Ä’™’æ’•’¨ ’ß ’°’§’¥’´’∂’´ ’Ø’∏’≤’¥’´÷Å÷â")
#         await query.edit_message_text("üö´ ’é’≥’°÷Ä’∏÷Ç’¥’® ’π’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
#         pending_verifications.pop(user_id, None)

# # ‚ñ∂Ô∏è Bot launch
# app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
# app.add_handler(CommandHandler("start", start))
# app.add_handler(CommandHandler("help", help_command))
# app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
# app.add_handler(CallbackQueryHandler(approve_callback))

# print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
# app.run_polling()


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import random

TELEGRAM_TOKEN = "7800118937:AAFrsLwwxvqYy3GmvLgU8MGzt_AxtVBlyfk"
ADMIN_ID = 7967129348  # ’î’∏ Telegram ID

users_data = {}
pending_verifications = {}

# ‚úÖ reply keyboard-’® ’¥’´’°’∂’£’°’¥’´÷Å ’§’∂’∏÷Ç’¥ ’•’∂÷Ñ
reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üéÆ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®"), KeyboardButton("‚ÑπÔ∏è ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂")]
    ],
    resize_keyboard=True
)

# ‚úÖ /start ’Ø’°’¥ üéÆ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users_data[user_id] = {
        "target": random.randint(1, 100),
        "attempts_left": 5,
        "paid": False
    }
    await update.message.reply_text(
        "‘≤’°÷Ä÷á üëã\n‘µ’Ω ’©’´’æ ’£’∏÷Ç’∑’°’Ø’∏’≤ ’≠’°’≤’°’µ’´’∂ ’¢’∏’ø ’•’¥÷â ’î’•’¶ ’¥’°’≤’©’∏÷Ç’¥ ’•’¥ ’¨’°’æ ’≠’°’≤‚Ä§‚Ä§‚Ä§üéâüéâüéâ\n",
        # "’à÷Ç’∂’•÷Ñ 5 ’°’∂’æ’≥’°÷Ä ÷É’∏÷Ä’±÷â\n",
        # "’é’≥’°÷Ä’•’¨’∏’æ 1000÷è’ù ’Ø’Ω’ø’°’∂’°÷Ñ 20 ÷É’∏÷Ä’±÷â\n",
        # "’é’≥’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù IDRAM` 077779321 üì≤\n",
        # "’é’≥’°÷Ä’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’£÷Ä’´÷Ä’ù ’æ’≥’°÷Ä’•’¨ ’•’¥",
        reply_markup=reply_keyboard
    )

# ‚úÖ /help ’Ø’°’¥ ‚ÑπÔ∏è ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’©’´’æ (÷Ö÷Ä’´’∂’°’Ø’ù 45) ’Ø’°’¥ ’Ω’•’≤’¥’´÷Ä ¬´üéÆ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®¬ª÷â")

# ‚úÖ Message handler ‚Äî ’≠’°’≤, ’æ’≥’°÷Ä’•’¨ ’•’¥, ’Ω’Ø’Ω’•’¨, ÷Ö’£’∂’∏÷Ç’©’µ’∏÷Ç’∂
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip().lower()

    # ’ç’Ø’Ω’•’¨ ’≠’°’≤’®
    if text == "üéÆ ’Ω’Ø’Ω’•’¨ ’≠’°’≤’®":
        await start(update, context)
        return
    elif text == "‚ÑπÔ∏è ÷Ö’£’∂’∏÷Ç’©’µ’∏÷Ç’∂":
        await help_command(update, context)
        return

    # ’é’≥’°÷Ä’•’¨ ’•’¥
    if "’æ’≥’°÷Ä’•’¨ ’•’¥" in text or "’æ’≥’°÷Ä’æ’°’Æ ’ß" in text:
        pending_verifications[user_id] = update.message.from_user.full_name
        await update.message.reply_text("‚úÖ ’Ä’°÷Ä÷Å’∏÷Ç’¥’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•’¨ ’ß ’°’§’¥’´’∂’´’∂÷â")

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data=f"cancel_{user_id}")]
        ])

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí∏ {pending_verifications[user_id]} ’£÷Ä’•’¨ ’ß ¬´{update.message.text}¬ª:",
            reply_markup=keyboard
        )
        return

    # ‘µ’©’• user-’® ’§’•’º ’π’∏÷Ç’∂’´ ’≠’°’≤, ’Ω’Ø’Ω’´
    if user_id not in users_data:
        await start(update, context)
        return

    # ‘π’æ’°’µ’´’∂ ÷É’∏÷Ä’±
    try:
        guess = int(text)
    except ValueError:
        await update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’°’¥’¢’∏’≤’ª ’©’´’æ÷â")
        return

    data = users_data[user_id]
    if data["attempts_left"] <= 0:
        await update.message.reply_text("’ì’∏÷Ä’±’•÷Ä’§ ’æ’•÷Ä’ª’°÷Å’•’¨ ’•’∂ ‚ùå\n’é’≥’°÷Ä’´÷Ä’ù ’∂’∏÷Ä’´÷Å ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
        return

    data["attempts_left"] -= 1
    if guess == data["target"]:
        await update.message.reply_text("üéâ ’É’´’∑’ø ’£’∏÷Ç’∑’°’Ø’•÷Å’´÷Ä! ’Ü’∏÷Ä ’©’´’æ ’•’¥ ’¥’ø’°’Æ’∏÷Ç’¥...")
        data["target"] = random.randint(1, 100)
        data["attempts_left"] = 5 if not data["paid"] else 20
    elif guess < data["target"]:
        await update.message.reply_text(f"üìâ ‘±’æ’•’¨’´ ’¢’°÷Ä’±÷Ä ’©’´’æ÷â ’Ñ’∂’°÷Å {data['attempts_left']} ÷É’∏÷Ä’±÷â")
    else:
        await update.message.reply_text(f"üìà ‘±’æ’•’¨’´ ÷Å’°’Æ÷Ä ’©’´’æ÷â ’Ñ’∂’°÷Å {data['attempts_left']} ÷É’∏÷Ä’±÷â")

# ‚úÖ ’Ä’°’Ω’ø’°’ø’∏÷Ç’¥/’π’•’≤’°÷Ä’Ø’∏÷Ç’¥ callback
async def approve_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’°’∂’•’¨÷â")
        return

    data = query.data
    user_id = int(data.split("_")[1])

    if data.startswith("approve_"):
        if user_id in users_data:
            users_data[user_id]["paid"] = True
            users_data[user_id]["attempts_left"] += 20
            await context.bot.send_message(chat_id=user_id,
                text="‚úÖ ’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â ’ç’ø’°÷Å’°÷Ä 20 ’∂’∏÷Ä ÷É’∏÷Ä’±÷â")
            await query.edit_message_text("’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å ‚úÖ")
        else:
            await query.edit_message_text("‚ùå ‘±’µ’§ user-’® ’≠’°’≤’® ’π’´ ’Ω’Ø’Ω’•’¨÷â")
        pending_verifications.pop(user_id, None)

    elif data.startswith("cancel_"):
        await context.bot.send_message(chat_id=user_id,
            text="‚ùå ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’¥’•÷Ä’™’æ’•’¨ ’ß ’°’§’¥’´’∂’´ ’Ø’∏’≤’¥’´÷Å÷â")
        await query.edit_message_text("’é’≥’°÷Ä’∏÷Ç’¥’® ’π’•’≤’°÷Ä’Ø’æ’•÷Å ‚ùå")
        pending_verifications.pop(user_id, None)

# ‚ñ∂Ô∏è Bot setup
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
app.add_handler(CallbackQueryHandler(approve_callback))

print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß ‚úÖ")
app.run_polling()

